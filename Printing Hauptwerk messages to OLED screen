#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>


#define OLED_WIDTH 128
#define OLED_HIGHT 32
#define OLED_Text_Size 2
#define OLED_Colour WHITE

#define Screen1_Address 0x3c // the i2C address of the Adafruit OLED screen that arrived first

Adafruit_SSD1306 Screen1(OLED_WIDTH, OLED_HIGHT);

char Screen1Text [32] {}; //delcaring 32 character array to hold 32 characters of text to be displayed on OLED
//char ScreensText [25][32] {}; //attempt at 2 deimenstional array to hold the screen number each dline of text relates to - draft code to be fixed

void UpdateScreen1() {

Screen1.clearDisplay();
Screen1.setTextSize(OLED_Text_Size);
Screen1.setTextColor(OLED_Colour);
Screen1.setCursor(0,0);
Screen1.println(Screen1Text);
Screen1.display();

}



#include <MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>

#define MIDI_SYSEX_ARRAY_SIZE 255
static const unsigned SysExMaxSize = 256;
const unsigned int MAX_MESSAGE_LENGTH = 69;

MIDI_CREATE_DEFAULT_INSTANCE();

const byte ID_HAUPTWERK=0x7D; //ID for Hauptwerk. Could end in upper case D? currently unsure
const byte MIDI_SYSEX=7; //code for SysEx command

String hwlines=""; //creating a string to store characters from MIDI temporarily before loading into character array

int midiType = 0; 
int data1 = 0;
int data2 = 0;


void processIncomingMIDIforOLED() 
{

  // Process incoming MIDI traffic for Sysex (no event handler)
 
  if (MIDI.read()) {

    midiType = MIDI.getType();
    data1 = MIDI.getData1();
    data2 = MIDI.getData2();

      if ((midiType == midi::SystemExclusive) && (data1 < 80)) { // We are interested in SysEx messages

       const byte *sysexmessage = MIDI.getSysExArray(); // This is a SysEx message and will fit in our array

         if ((sysexmessage[1] == ID_HAUPTWERK) && (data1 > 24)) { // This is from Hauptwerk

         int ScreenIndex = sysexmessage[3];

           for (int x = 6; x < (37); x++) { // Step through sysex message
           
           byte c = sysexmessage[x];
           hwlines += char(c); //temporarily store characters from MIDI in a string

          }

         int str_len = hwlines.length() + 1;
          
         hwlines.toCharArray(Screen1Text, str_len); //move  characters from the string into the Character array defined at the start of the code
      }
    }
  }
}

void setup() {

  Serial.begin(9600); //set to serial rate for arduino uno

  Screen1.begin(SSD1306_SWITCHCAPVCC, Screen1_Address); //begin the OLED dispaly we are using
  Screen1.clearDisplay();

  MIDI.begin(MIDI_CHANNEL_OMNI);

}

void loop() {

 processIncomingMIDIforOLED(); //decode the MIDI messages and store it in the character array

 UpdateScreen1(); //update the physical display screen using the latest character array

}
