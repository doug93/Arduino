#include <Wire.h> // Include Wire Library for I2C

// Include Adafruit Graphics & OLED libraries
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#include <Fonts/FreeSans9pt7b.h> //a number of fonts can be included into the scetch from the Adafruit Graphics Library

#define OLED_RESET 4 // Reset pin not used but needed for library

#define Display_Address 0x3c //i2c address of the OLED displays we are working with - this code assumes that they are all the same

#define Big_Screen_Width 128
#define Big_Screen_Height 64
#define BigScreenFont &FreeSans9pt7b//define as "&" and then the name of the font we included above - this will then drive the font used later in the code. Leave blank here to just use the default font
#define BigScreenFontSize 1 //will set size of text in dispalys later in the code
int BigScreenLine1Start = 12;
int BigScreenLineSpace  = 6;

#define Small_Screen_Width 128
#define Small_Screen_Height 32
#define SmallScreenFont //&FreeSans9pt7b
#define SmallScreenFonttSize 2
int SmallScreenLine1Start = 0;
int SmallScreenLineSpace = 1;



Adafruit_SSD1306 BigScreen(Big_Screen_Width,Big_Screen_Height);
Adafruit_SSD1306 SmallScreen(Small_Screen_Width,Small_Screen_Height);


char MultiplexerAddresses[] {0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77}; // array to store the I2C addressed  of  the  8  Multiplexers in this code


char TextToDisplay[64][32] = {}; //array to store text to be displayed. Rows correspond to Multiplexers and columns correspond to channels.


void drawCentreString(const char *buf, int x, int y) {
    
  int16_t x1, y1;
  uint16_t w, h;

  BigScreen.getTextBounds(buf, x, y, &x1, &y1, &w, &h); //calc width of new string
  BigScreen.setCursor((x-w)/2, y);
  BigScreen.print(buf);

}



void FormatBigScreenText(int Screen_Number){

  BigScreen.clearDisplay();

  BigScreen.setFont(BigScreenFont);
  BigScreen.setTextSize(BigScreenFontSize);
  BigScreen.setTextColor(WHITE);

  int x = 0;
  int y = BigScreenLine1Start;

  int16_t x1, y1;
  uint16_t w, h;

  BigScreen.getTextBounds(TextToDisplay[Screen_Number], x, y, &x1, &y1, &w, &h);


  if(w <= Big_Screen_Width) {

   drawCentreString(TextToDisplay[Screen_Number], Big_Screen_Width, BigScreenLine1Start);

  }


  if( w > Big_Screen_Width ){

   char Lines[4][32] = {};
   String Str = "";

   int Line  =  0;
   int LineWidth = 0;
   int LastBlank = 0;
   int NextCharacterToPrint = 0;


    for(int i=0; i<32; i++){ //step through the characters in the master character array of text to display


      if(LineWidth <= Big_Screen_Width){

       String Glyph = "";
       Glyph = TextToDisplay[Screen_Number][i];

       int x = 0;
       int y = BigScreenLine1Start;

       int16_t x1, y1;
       uint16_t w, h;

       BigScreen.getTextBounds(Glyph, x, y, &x1, &y1, &w, &h); //calc width of new string

       LineWidth += w;

       if(Glyph == " ") { LastBlank = i; };

      }
    

      if(LineWidth > Big_Screen_Width){


        for(int n = NextCharacterToPrint; n < LastBlank; n++){ //put the characters up to last blank intl the character array line 0

         Str += TextToDisplay[Screen_Number][n];

         NextCharacterToPrint += 1;

        }

      
       int str_len = Str.length() + 1;

       Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code

       int x = 0;
       int y = BigScreenLine1Start;

       int16_t x1, y1;
       uint16_t w, h;

       BigScreen.getTextBounds(Str, x, y, &x1, &y1, &w, &h); //calc width of new string

       LineWidth -= w; //reduce the variable "LineWidth" in our code by the width of the text we have put in the master character array to be printed

       Str = "";

       Line += 1; //increment line as we procedd to the next line of texyt to sprint
      
      }

    }


    for(int n = NextCharacterToPrint; n < 32; n++){ //put the characters up to last blank intl the character array line 0

       Str += TextToDisplay[Screen_Number][n];

    }

   int str_len = Str.length() + 1;

   Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code
    

    for(int i=0; i <= Line; i++){

     drawCentreString(Lines[i], Big_Screen_Width, BigScreenLine1Start + (BigScreenLine1Start + BigScreenLineSpace)*i );
    
    }

  }

  BigScreen.display();

}


void FormatSmallScreenText(int  Screen_Number){
   
  SmallScreen.clearDisplay();

  SmallScreen.setFont(SmallScreenFont);
  SmallScreen.setTextSize(SmallScreenFonttSize);
  SmallScreen.setTextColor(WHITE);
  SmallScreen.setCursor(0,SmallScreenLine1Start);
  SmallScreen.println(TextToDisplay[Screen_Number]);
  //SmallScreen.setCursor(0,SmallScreenLine1Start*2+SmallScreenLineSpace); //we;re only using  2 lines for the small  screen
  //SmallScreen.println(TextToDisplay[Screen_Number][1]);

  SmallScreen.display();

}




int Multiplexers[64] = { //array to match the 64 different OLED screen IDs from Hauptwerk with the corresponding Multiplexer

  0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7, 7, 7,

};


int Channels[64] = { //array to match the 64 different OLED screen IDs from Hauptwerk with the corresponding Channel within the  Multiplexer
  
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,

};

int ScreenSizes[64] = { //set to 0 for  32 pixal screens and  1 for  64 pixal screens
  
  0,0,0,0,0,0,1,1,
  0,0,0,1,1,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,

};


void SwitchMultiplexerChannel(int Multiplexer, uint8_t i) { //funcion used to switch one one channel of the multiplexer we  are using

  char address = MultiplexerAddresses[Multiplexer];
  Wire.beginTransmission(address);
  Wire.write(1 << i);
  Wire.endTransmission(); 
  
}


void MultiplexerOff(int Multiplexer) { //funciton used to switch off all channels of the multiplexer we are using

 char address = MultiplexerAddresses[Multiplexer];

 Wire.beginTransmission(address);
 Wire.write(0);  // no channel selected
 Wire.endTransmission();

}


void StartDisplay(int Screen_Number){ //function to initiate display when first turned on and then show whatever is currenlty in the main character array

 int multiplexer = Multiplexers[Screen_Number];
 int channel = Channels[Screen_Number];

 SwitchMultiplexerChannel(multiplexer, channel);  


  if(ScreenSizes[Screen_Number] == 0) {  

   SmallScreen.begin(SSD1306_SWITCHCAPVCC, Display_Address);

   FormatSmallScreenText(Screen_Number);

  }


  if(ScreenSizes[Screen_Number] == 1) {  
  
   BigScreen.begin(SSD1306_SWITCHCAPVCC, Display_Address);

   FormatBigScreenText(Screen_Number);

  }


 MultiplexerOff(multiplexer);

}


void UpdateDisplay(int Screen_Number) { //setting up a function to update the physical screen based on the characters currently stored in the corresponding character array

 int multiplexer = Multiplexers[Screen_Number];
 int channel = Channels[Screen_Number];

 SwitchMultiplexerChannel(multiplexer, channel);  


  if(ScreenSizes[Screen_Number] == 0) {    
  
   FormatSmallScreenText(Screen_Number);

  }


  if(ScreenSizes[Screen_Number] == 1) {  
  
   FormatBigScreenText(Screen_Number);

  }


 MultiplexerOff(multiplexer);


}



#include <USB-MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>

#define MIDI_SYSEX_ARRAY_SIZE 255
static const unsigned SysExMaxSize = 256;
const unsigned int MAX_MESSAGE_LENGTH = 69;

USBMIDI_CREATE_DEFAULT_INSTANCE();

const byte ID_HAUPTWERK=0x7D; //ID for Hauptwerk. Could end in upper case D? currently unsure
const byte MIDI_SYSEX=7; //code for SysEx command


void processIncomingMIDIforOLED() { // Process incoming MIDI traffic for Sysex (no event handler)
 
  if (MIDI.read()) {

   int midiType = 0; 
   int data1 = 0;
   int data2 = 0;

   midiType = MIDI.getType();
   data1 = MIDI.getData1();
   data2 = MIDI.getData2();

   const byte *sysexmessage = MIDI.getSysExArray();


    if ((midiType == midi::SystemExclusive) && (data1 < 80)) { // We are interested in SysEx messages 

     const byte *sysexmessage = MIDI.getSysExArray(); // This is a SysEx message and will fit in our array

      if ((sysexmessage[1] == ID_HAUPTWERK) && (data1 > 24)) { // This is from Hauptwerk

        int ScreenIndex = sysexmessage[3];

        String HauptwerkText = "";
        
        for (int x = 6; x < 37; x++) { // Step through sysex message
             
          byte c = sysexmessage[x];

          HauptwerkText += char(c); //temporarily store characters from MIDI in a string

        }

       int str_len = HauptwerkText.length() + 1;

       HauptwerkText.toCharArray(TextToDisplay[ScreenIndex], str_len); //move  characters from the string into the Character array defined at the start of the code

       UpdateDisplay(ScreenIndex);
       
      }
    }
  }
}


void setup() {

 Serial.begin(115200);
 Wire.begin(); // Start Wire library for I2C
 MIDI.begin(MIDI_CHANNEL_OMNI);
 

  for(int i = 1; i<=64; i++){ //filling the charactar array with the screen numbers per Hauptwerk

   String Str ="Screen Identifier ";
   Str += i;

   int Str_len = Str.length() + 1;

   Str.toCharArray(TextToDisplay[i-1], Str_len);
 
  }


  for(int i = 0; i<=7; i++){ //close all multiplexers to beging with in case any are currently set to certain channels from last time they were used

   MultiplexerOff(i);

  }


  for(int i = 0; i<=63; i++) { //initiate all OLEDs and get them to diplay what's currenlty in the character array

   StartDisplay(i); 

  }


}


void loop(){

 processIncomingMIDIforOLED();

}
