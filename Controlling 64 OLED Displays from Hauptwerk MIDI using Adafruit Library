//this code is written with the intension to print up to 64 OLED displays with text from  Hauptwerk Virtual Pipe Organ Software
//the intended componetns are:
// 1 arduino Due which can be pulgged directly into the computre running Hauptwerk and get the data via MIDI USB
// 8 Adafruit TCA9548A i2c multiplexers - these enable us to control up to 8 i2c OLED displays that share the same i2c address.
//    - note that the below draft of the code assumes all the OLEDs will have the address 0x3c.
//    - note also that you need to link various combinations of the A0, A1 and A2 pins on the multiplexers to the possitive terminal to give each multiplexer a different i2c address.
//    - note one multiplexer can control up to 8 OLED displays. So with a maximul of 8 multiplexers each controlling 8 OLED displays you could have up to 64 OLEDs running which is why this code is written to accomodate up to 64 OLEDs 
// your choice of up to 64 OLEDs. Note the below version of the code is currenlty written to run a mixture of 32 pixal high and 64 pixal high OLEDs (all 128 pixals wide). But you can easily adjust the code for OLEDs of different sizes.
// note I have made some ammends in the section that is reading Hauptwerk messages to customise the text being displayed to the screens I use for my current sample set, sequenser and combination.

#include <Wire.h> // Include Wire Library for I2C

#include <Adafruit_SSD1306.h> // Include Adafruit Graphics & OLED libraries
#include <Adafruit_GFX.h>

#include <Fonts/FreeSans9pt7b.h> //a number of fonts can be included into the scetch from the Adafruit Graphics Library

#define OLED_RESET 4 // Reset pin not used but needed for library

#define Display_Address 0x3c //i2c address of the OLED displays we are working with - this code assumes that they are all the same

//this code is designed to accomodate a mixture of small OLED displays (32 pixal height) and larger ones (64 pixal height). Both presumed to have a width of 128 pixals in this code but the code could  easily be altered to accmodate wider ones
#define Big_Screen_Width 128
#define Big_Screen_Height 64
#define BigScreenFont &FreeSans9pt7b//define as "&" and then the name of the font we included above - this will then drive the font used later in the code. Leave blank here to just use the default font
#define BigScreenFontSize 1 //will set size of text in dispalys later in the code
#define BigScreenLine1Start 12
#define BigScreenLineSpace 6 //marks the gap inbetween rows of text on the OLEDs
#define BigScreenBoarder 30 //indicates a number of pixals on the right that is needed later in the code to ensuer we don't print characters that are only partially visible on the far right of the display
#define BigScreenCaracterSpace 0

#define Small_Screen_Width 128
#define Small_Screen_Height 32
#define SmallScreenFont &FreeSans9pt7b
#define SmallScreenFonttSize 1
#define SmallScreenLine1Start 12
#define SmallScreenLineSpace 4
#define SmallScreenBoarder 0
#define SmallScreenCaracterSpace 2

Adafruit_SSD1306 BigScreen(Big_Screen_Width,Big_Screen_Height);
Adafruit_SSD1306 SmallScreen(Small_Screen_Width,Small_Screen_Height);

#define SampleSetScreen 12
#define SequensorScreen 13
#define CombinationScreen 8

char MultiplexerAddresses[] {0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77}; // array to store the I2C addressed  of  the  8  Multiplexers in this code


char TextToDisplay[64][32] = {}; //array to store text to be displayed. Rows correspond to Multiplexers and columns correspond to channels.


int Width = 0;

void UpdateWidth(char *msg){

 int x = 0;
 int y = BigScreenLine1Start;

 int16_t x1, y1;
 uint16_t w, h;

 BigScreen.setTextWrap(false);
 BigScreen.getTextBounds(msg, x, y, &x1, &y1, &w, &h);

 Width = w;

}



void drawCentreString(char *buf, int y) {

 int x = Big_Screen_Width;

 int16_t x1, y1;
 uint16_t w, h;

 BigScreen.getTextBounds(buf, x, y, &x1, &y1, &w, &h); //calc width of new string
 BigScreen.setCursor((x-w)/2, y);
 BigScreen.println(buf);

}



void FormatBigScreenText(int Screen_Number){

 BigScreen.clearDisplay();

 BigScreen.setFont(BigScreenFont);
 BigScreen.setTextSize(BigScreenFontSize);
 BigScreen.setTextColor(WHITE);

 UpdateWidth(TextToDisplay[Screen_Number]);

 bool IncludesNewLineCharacter = 0;

  for(int i=0; i<32; i++){

   String Str = "";
   Str = TextToDisplay[Screen_Number][i];

   if(Str == "^") { IncludesNewLineCharacter = 1; }

  }


 if((Width <= (Big_Screen_Width - BigScreenBoarder)) && IncludesNewLineCharacter == 0) {

   BigScreen.setCursor(0,  BigScreenLine1Start);
   BigScreen.println(TextToDisplay[Screen_Number]);

  }


  else {

   char Lines[4][32] = {}; //big OLED displays are designed to hold up to two lines of text in this code
   String Str = "";

   int Line  =  0;
   int LineWidth = 0;
   int LastBlank = 0;
   int NextCharacterToPrint = 0;


    for(int i=0; i<32; i++){ //step through the characters in the master character array of text to display

      String Glyph = "";
      Glyph = TextToDisplay[Screen_Number][i];

      if((LineWidth <= (Big_Screen_Width - BigScreenBoarder)) && (Glyph != "^")){

        int x = 0;
        int y = BigScreenLine1Start;

        int16_t x1, y1;
        uint16_t w, h;

        BigScreen.setTextWrap(false);
        BigScreen.getTextBounds(Glyph, x, y, &x1, &y1, &w, &h);

       LineWidth += w;
       LineWidth += BigScreenCaracterSpace;

       if(Glyph == " ") { LastBlank = i; };

      }

      if(Glyph == "^"){ LastBlank = i; }
    

      if((LineWidth > (Big_Screen_Width - BigScreenBoarder)) || (Glyph == "^")){


        for(int n = NextCharacterToPrint; n <= LastBlank; n++){ //put the characters up to last blank intl the character array to be printed

          if( n != LastBlank){ //this fnction is to ensuer that we don't put the last blank the character array to be printed 
         
           Str += TextToDisplay[Screen_Number][n];

          }

          else { //this fucntion is to reduce the soted linewidth by the last blank

           String LastBlankCharacter = "";
           
           LastBlankCharacter = TextToDisplay[Screen_Number][n];

           int x = 0;
           int y = BigScreenLine1Start;
           int16_t x1, y1;
           uint16_t w, h;
           BigScreen.setTextWrap(false);
           BigScreen.getTextBounds(LastBlankCharacter, x, y, &x1, &y1, &w, &h);

           LineWidth -= w;
           LineWidth -= BigScreenCaracterSpace;

          }

         NextCharacterToPrint += 1;

        }

      
       int str_len = Str.length() + 1;

       Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code

       UpdateWidth(Lines[Line]);

       LineWidth -= Width; //reduce the variable "LineWidth" in our code by the width of the text we have put in the master character array to be printed

       Str = "";

       Line += 1; //increment line as we procedd to the next line of texyt to sprint
     
      }

    }


    for(int n = NextCharacterToPrint; n < 32; n++){ //put the characters up to last blank intl the character array line 0
        
     Str += TextToDisplay[Screen_Number][n];

    }

   int str_len = Str.length() + 1;

   Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code
    

    for(int i=0; i <= Line; i++){
     
     BigScreen.setCursor(0, BigScreenLine1Start + (BigScreenLine1Start + BigScreenLineSpace)*i );
     BigScreen.println(Lines[i]);
    
    }

  }

  BigScreen.display();

}


void FormatSmallScreenText(int  Screen_Number){
   
 SmallScreen.clearDisplay();

 SmallScreen.setFont(BigScreenFont);
 SmallScreen.setTextSize(BigScreenFontSize);
 SmallScreen.setTextColor(WHITE);

 UpdateWidth(TextToDisplay[Screen_Number]);

 bool IncludesNewLineCharacter = 0;

  for(int i=0; i<32; i++){

   String Str = "";
   Str = TextToDisplay[Screen_Number][i];

   if(Str == "^") { IncludesNewLineCharacter = 1; }

  }


 if((Width <= (Small_Screen_Width - SmallScreenBoarder)) && IncludesNewLineCharacter == 0) { //this function is that if the text is supposed to fit on one line it will be printed on one line

   SmallScreen.setCursor(0,  BigScreenLine1Start);
   SmallScreen.println(TextToDisplay[Screen_Number]);

  }


  else { //this funciton is triggered when eitehr the text we want to print won't fit on one line or we have included a, "^" that is a character we use to indicate a new line

   char Lines[2][32] = {}; //small OLED displays are designed to hold up to two lines of text in this code
   String Str = "";

   int Line  =  0;
   int LineWidth = 0;
   int LastBlank = 0;
   int NextCharacterToPrint = 0;


    for(int i=0; i<32; i++){ //step through the characters in the master character array of text to display

     String Glyph = "";
     Glyph = TextToDisplay[Screen_Number][i];

      if((LineWidth <= (Small_Screen_Width - SmallScreenBoarder)) && (Glyph != "^")){

        int x = 0;
        int y = SmallScreenLine1Start;

        int16_t x1, y1;
        uint16_t w, h;

        SmallScreen.setTextWrap(false);
        SmallScreen.getTextBounds(Glyph, x, y, &x1, &y1, &w, &h);

       LineWidth += w;
       LineWidth += SmallScreenCaracterSpace;

       if(Glyph == " ") { LastBlank = i; }

      }

      
      if(Glyph == "^") { LastBlank = i; }
    

      if((LineWidth > (Small_Screen_Width - SmallScreenBoarder)) || (Glyph == "^")){


        for(int n = NextCharacterToPrint; n <= LastBlank; n++){ //put the characters up to last blank intl the character array line 0

          if(n != LastBlank){

           Str += TextToDisplay[Screen_Number][n];

          }

          else { //this fucntion is to reduce the soted linewidth by the last blank

           String LastBlankCharacter = "";
           
           LastBlankCharacter = TextToDisplay[Screen_Number][n];

           int x = 0;
           int y = SmallScreenLine1Start;
           int16_t x1, y1;
           uint16_t w, h;
           SmallScreen.setTextWrap(false);
           SmallScreen.getTextBounds(LastBlankCharacter, x, y, &x1, &y1, &w, &h);

           LineWidth -= w;
           LineWidth -= SmallScreenCaracterSpace;

          }

         NextCharacterToPrint += 1;

        }

      
       int str_len = Str.length() + 1;

       Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code

       UpdateWidth(Lines[Line]);

       LineWidth -= Width; //reduce the variable "LineWidth" in our code by the width of the text we have put in the master character array to be printed

       Str = "";

       Line += 1; //increment line as we procedd to the next line of texyt to sprint
     
      }

    }


    for(int n = NextCharacterToPrint; n < 32; n++){ //put the characters up to last blank intl the character array line 0

       Str += TextToDisplay[Screen_Number][n];

    }

   int str_len = Str.length() + 1;

   Str.toCharArray(Lines[Line], str_len); //move  characters from the string into the Character array defined at the start of the code
    

    for(int i=0; i <= Line; i++){
     
     SmallScreen.setCursor(0, SmallScreenLine1Start + (SmallScreenLine1Start + SmallScreenLineSpace)*i );
     SmallScreen.println(Lines[i]);
    
    }

  }

  SmallScreen.display();

}




int Multiplexers[64] = { //array to match the 64 different OLED screen IDs from Hauptwerk with the corresponding Multiplexer

  0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7, 7, 7,

};


int Channels[64] = { //array to match the 64 different OLED screen IDs from Hauptwerk with the corresponding Channel within the  Multiplexer
  
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,

};

bool ScreenSizes[64] = { //set to 0 for 32 pixal screens and  1 for 64 pixal screens
  
  0,0,0,0,0,0,1,1,
  0,0,0,1,1,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,

};


void SwitchMultiplexerChannel(int Multiplexer, uint8_t i) { //funcion used to switch one one channel of the multiplexer we  are using

  char address = MultiplexerAddresses[Multiplexer];
  Wire.beginTransmission(address);
  Wire.write(1 << i);
  Wire.endTransmission(); 
  
}


void MultiplexerOff(int Multiplexer) { //funciton used to switch off all channels of the multiplexer we are using

 char address = MultiplexerAddresses[Multiplexer];

 Wire.beginTransmission(address);
 Wire.write(0);  // no channel selected
 Wire.endTransmission();

}


void StartDisplay(int Screen_Number){ //function to initiate display when first turned on and then show whatever is currenlty in the main character array

 int multiplexer = Multiplexers[Screen_Number];
 int channel = Channels[Screen_Number];

 SwitchMultiplexerChannel(multiplexer, channel);  


  if(ScreenSizes[Screen_Number] == 0) {  

   SmallScreen.begin(SSD1306_SWITCHCAPVCC, Display_Address);

   FormatSmallScreenText(Screen_Number);

  }


  if(ScreenSizes[Screen_Number] == 1) {  
  
   BigScreen.begin(SSD1306_SWITCHCAPVCC, Display_Address);

   FormatBigScreenText(Screen_Number);

  }


 MultiplexerOff(multiplexer);

}


void UpdateDisplay(int Screen_Number) { //setting up a function to update the physical screen based on the characters currently stored in the corresponding character array

 int multiplexer = Multiplexers[Screen_Number];
 int channel = Channels[Screen_Number];

 SwitchMultiplexerChannel(multiplexer, channel);  


  if(ScreenSizes[Screen_Number] == 0) {    
  
   FormatSmallScreenText(Screen_Number);

  }


  if(ScreenSizes[Screen_Number] == 1) {  
  
   FormatBigScreenText(Screen_Number);

  }


 MultiplexerOff(multiplexer);


}



#include <USB-MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>

#define MIDI_SYSEX_ARRAY_SIZE 255
static const unsigned SysExMaxSize = 256;
const unsigned int MAX_MESSAGE_LENGTH = 69;

USBMIDI_CREATE_DEFAULT_INSTANCE();

const byte ID_HAUPTWERK=0x7D; //ID for Hauptwerk. Could end in upper case D? currently unsure
const byte MIDI_SYSEX=7; //code for SysEx command

void processIncomingMIDIforOLED() { // Process incoming MIDI traffic for Sysex (no event handler)
 
  if (MIDI.read()) {

   int midiType = 0; 
   int data1 = 0;
   int data2 = 0;

   midiType = MIDI.getType();
   data1 = MIDI.getData1();
   data2 = MIDI.getData2();

   const byte *sysexmessage = MIDI.getSysExArray();


    if ((midiType == midi::SystemExclusive) && (data1 < 80)) { // We are interested in SysEx messages 

     const byte *sysexmessage = MIDI.getSysExArray(); // This is a SysEx message and will fit in our array

      if ((sysexmessage[1] == ID_HAUPTWERK) && (data1 > 24)) { // This is from Hauptwerk

        int ScreenIndex = sysexmessage[3];

        String HauptwerkText = "";


        if(ScreenIndex == (SampleSetScreen - 1)){

          for (int x = 6; x <= 37; x++) { // Step through sysex message
             
           byte c = sysexmessage[x];

           if(x == 22) { HauptwerkText += "^"; }

           HauptwerkText += char(c);

          }

        }


        else if(ScreenIndex == (SequensorScreen - 1)){

          for (int x = 6; x <= 37; x++) { // Step through sysex message
             
           byte c = sysexmessage[x];

            if( (x == 14) || (x == 22) ) {
              
              HauptwerkText += "^";
            
            }

            if( (x < 14) || ( (x > 14) && (x < 22) ) || (x > 29 ) ){

             HauptwerkText += char(c);

            }
           
          }

        }


        else if(ScreenIndex == (CombinationScreen - 1)){

          for (int x = 6; x <= 37; x++) { // Step through sysex message
             
           byte c = sysexmessage[x];

           if(x == 22) { HauptwerkText += "^"; }

           HauptwerkText += char(c);

          }

        }

        
        else for (int x = 6; x <= 37; x++) { // Step through sysex message
             
          byte c = sysexmessage[x];

          HauptwerkText += char(c); //temporarily store characters from MIDI in a string

        }

       int str_len = HauptwerkText.length() + 1;

       HauptwerkText.toCharArray(TextToDisplay[ScreenIndex], str_len); //move  characters from the string into the Character array defined at the start of the code

       UpdateDisplay(ScreenIndex);
       
      }
    }
  }
}


void setup() {

 Serial.begin(115200);
 Wire.begin(); // Start Wire library for I2C
 MIDI.begin(MIDI_CHANNEL_OMNI);
 

  for(int i = 1; i<=64; i++){ //filling the charactar array with the screen numbers per Hauptwerk

   String Str ="Screen ";
   Str += i;

   int Str_len = Str.length() + 1;

   Str.toCharArray(TextToDisplay[i-1], Str_len);
 
  }


  for(int i = 0; i<=7; i++){ //close all multiplexers to beging with in case any are currently set to certain channels from last time they were used

   MultiplexerOff(i);

  }


  for(int i = 0; i<=63; i++) { //initiate all OLEDs and get them to diplay what's currenlty in the character array

   StartDisplay(i);

  }

}


void loop(){

 processIncomingMIDIforOLED();

}
