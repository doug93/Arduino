#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_WIDTH 128
#define OLED_HIGHT 32

#define Screen1_Address 0x3c // the i2C address of the Adafruit OLED screen that arrived first

Adafruit_SSD1306 Screen1(OLED_WIDTH, OLED_HIGHT);

char Screen1Text [] {"Awaiting MIDI SYSEX"};

void UpdateScreen1() { //setting up a function to update the physical screen based on the characters currently stored in the corresponding character array

  Screen1.clearDisplay();
  Screen1.setTextSize(2);
  Screen1.setTextColor(WHITE);
  Screen1.setCursor(0,0);
  Screen1.println(Screen1Text);
  Screen1.display();

}


#include <MIDI.h>

MIDI_CREATE_DEFAULT_INSTANCE();

const byte MIDI_SYSEX=7; //code for SysEx command
const byte ID_HAUPTWERK=0x7D; //ID for Hauptwerk

int midiType=0; 
int data1=0;
int data2=0;

int hwline1 = 0;
int hwline2 = 0;


void setup() {

  MIDI.begin(MIDI_CHANNEL_OMNI);

  Screen1.begin(SSD1306_SWITCHCAPVCC, Screen1_Address);
  Screen1.clearDisplay();

  delay(500);

}

void loop() {



// Process incoming MIDI traffic for Sysex (no event handler)
  if (MIDI.read()) {
    midiType=MIDI.getType();
    data1=MIDI.getData1();
    data2=MIDI.getData2();
    //we are interested in SysEx messages

    if ((midiType == MIDI_SYSEX) && (data1 < 80)) {      
    //this is a SysEx message and will fit in our array   
    byte * sysexmessage=MIDI.getSysExArray();
    hwline1="";
    hwline2="";

    if ((sysexmessage[1]==ID_HAUPTWERK) && (data1 > 24)) {
        //this is from Hauptwerk 

        for (int x=6; x<(22); x++){
          //step through sysex message 
          byte c=sysexmessage[x];
          hwline1 = hwline1 + char(c);
        }
        for (int x=22; x<(37); x++){
          //step through sysex message 
          byte c=sysexmessage[x];
          hwline2 = hwline2 + char(c);
        }
       }
     }
  }

Screen1Text [] = hwline1;

UpdateScreen1();

delay(500);

}
